#!/usr/bin/env bash

#New developer install of all system prereqs. Takes an single argument of the device to be used for the docker thinpool e.g. /dev/sdb
#Should be run by the linux user that will be doing develop. User should be in sudo group.  If run by root set the USER env variable
#when running the script.  e.g.  USER=jdoe newdev-installer

#This script Installs required software, git jdk etc.... Provisions a thin pool for docker if not present, installs and configures docker.



display_error() {
    tput sgr0
    tput setaf 1
    echo "ERROR: $1"
    tput sgr0
    exit 1
}
#exits if user not set
: ${USER?"USER must be set"}

DEVICE=$1
#DOCKER_VERSION=17.03.1~ce-0
VGNAME=docker
CREATE_THINPOOL=true
THINPOOL=
THINPOOL_CMD="sudo lvs -S lv_attr=~t.\* -o lv_dmpath --noheadings"

#Set by caller of script to skip thinpool creation and configuration
CONF_THINPOOL=${CONF_THINPOOL:-true}


if ! sudo -V  > /dev/null 2>&1  ; then
    display_error "Please install sudo to run this script"
fi

if ${CONF_THINPOOL}  ; then
    if ! sudo lvs --help > /dev/null 2>&1 ; then
        if [ -z "$1" ] ; then
            display_error "Please specify device for docker thin pool, e.g. /dev/sda"
        fi
    else
        #see if thin pool exists
        THINPOOL=$(sudo lvs -S lv_attr=~t.\* -o lv_dmpath --noheadings | tr -d \ )
        if [ "${THINPOOL}" = "/dev/mapper/${VGNAME}-docker--pool" ] ; then
        CREATE_THINPOOL=false
        else
        if [ -z "$1" ] ; then
                display_error "Please specify device for docker thin pool, e.g. /dev/sdb"
            fi
        fi
    fi
fi

if ! lsb_release -v  >/dev/null 2>&1 ; then
    echo "Installing lsb_release to determine version"
    sudo apt-get update  > /dev/null2>&1
    sudo apt-get install -y lsb-release || display_error "failed to install lsb-release"
fi

UBUNTU_VERSION=$(lsb_release -sc)

echo "Configuring ${UBUNTU_VERSION} for developer environment."
echo "Updating Repositories..."

if ! add-apt-repository --help > /dev/null 2>&1 ; then
    echo "Install software-properties-common to get add-apt-repository..."
    apt-get update  > /dev/null 2>&1
    sudo apt-get install -y software-properties-common || display_error "failed to install software-properties-common"
fi

sudo apt-add-repository multiverse  ||     display_error "failed to add multiverse repository"
sudo apt-add-repository universe    ||     display_error "failed to add universe repository"
sudo apt-add-repository restricted  ||     display_error "failed to add restricted repository"

sudo apt-get update > /dev/null 2>&1
sudo apt-get install -y apt-transport-https      || display_error "failed to install apt-transport-https"
sudo apt-get install -y ca-certificates          || display_error "failed to install ca-certificates"
sudo apt-get install -y thin-provisioning-tools  || display_error "failed to install thin-provisioning-tools"
sudo apt-get install -y curl                     || display_error "failed to install curl"
sudo apt-get install -y gnupg                    || display_error "failed to install gnupg"
sudo apt-get install -y lsb-release              || display_error "failed to install lsb-release"
sudo apt-get install -y python-pip               || display_error "failed to install pip"
sudo pip2 install --upgrade pip==20.3.4          || display_error "failed to upgrade pip to version 20.3.4"
sudo apt-get install -y nfs-kernel-server        || display_error "failed to install nfs-kernel-server"
sudo apt-get install -y nfs-common               || display_error "failed to install nfs-common"
sudo apt-get install -y net-tools                || display_error "failed to install net-tools"
sudo apt-get install -y build-essential          || display_error "failed to install build-essential"
sudo apt-get install -y bison                    || display_error "failed to install bison"
sudo apt-get install -y libpam0g-dev             || display_error "failed to install libpam0g-dev"
sudo apt-get install -y xfsprogs                 || display_error "failed to install xfsprogs"
sudo apt-get install -y xfsdump                  || display_error "failed to install xfsdump"
sudo apt-get install -y libdevmapper-dev         || display_error "failed to install libdevmapper-dev"
sudo apt-get install -y python-dev               || display_error "failed to install python-dev"
sudo apt-get install -y git                      || display_error "failed to install git"
sudo apt-get install -y openjdk-8-jdk-headless   || display_error "failed to install openjdk-8-jdk-headless"
sudo apt-get install -y lvm2                     || display_error "failed to install lvm2"
sudo apt-get install -y sysstat                  || display_error "failed to install sysstat"
sudo apt-get install -y screen                  || display_error "failed to install screen"

echo "Install gcloud tools"
# Create environment variable for correct distribution
export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"

# Add the Cloud SDK distribution URI as a package source
echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

# Import the Google Cloud Platform public key
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# Update the package list and install the Cloud SDK
sudo apt-get update -y && sudo apt-get install -y google-cloud-sdk


echo "Upgrading pip..."
sudo pip install --upgrade pip  || display_error "failed to upgrade pip"

STORAGE_OPT=""
if ${CONF_THINPOOL} ; then

    if $CREATE_THINPOOL ; then
        echo "Creating thinpool with device ${DEVICE}..."

        sudo vgcreate ${VGNAME} ${DEVICE} || display_error "Failed to create volume group"

        sudo lvcreate -T -l98%FREE --name ${VGNAME}/docker-pool || display_error "Failed to create logical volume"

        THINPOOL=$(sudo lvs -S lv_attr=~t.\* -o lv_dmpath --noheadings | tr -d \ )
    else
        echo "Thinpool exists, skipping thinpool creation"
    fi
    STORAGE_OPT="--storage-opt dm.thinpooldev=${THINPOOL}"
fi


echo "Installing docker..."
curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    || display_error "failed to add Dockerâ€™s official GPG key"
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update  > /dev/null 2>&1
sudo apt-get install docker-ce     || display_error "failed to install docker-ce"
sudo apt-get install docker-ce-cli || display_error "failed to install docker-ce-cli"
sudo apt-get install containerd.io || display_error "failed to install containerd.io"
sudo usermod -a -G docker ${USER}  || display_error "failed to add ${USER} to docker group"


echo "Configuring docker..."
sudo systemctl stop docker

#comment out existing docker opts
sudo sed -in '/DOCKER_OPTS/ s/^#*/#/' /etc/default/docker
sudo echo "DOCKER_OPTS=\"--dns 10.87.113.13 --dns 10.88.102.13 --dns 10.88.120.84 --dns 8.8.8.8 --bip=172.17.42.1/16 -s devicemapper ${STORAGE_OPT} --userland-proxy=false --insecure-registry=$(hostname)\:5000\"" | sudo tee -a /etc/default/docker > /dev/null  || display_error "Failed to set docker opts"

sudo sed -i -e 's:ExecStart=/usr/bin/docker daemon -H fd\://:TasksMax=infinity\nEnvironmentFile=/etc/default/docker\nExecStart=/usr/bin/docker daemon $DOCKER_OPTS -H fd\://:' /lib/systemd/system/docker.service || display_error "Failed to modify docker bin script"

if ${CONF_THINPOOL} ; then
    sudo rm -rf /var/lib/docker
    echo "Docker configured to use thinpool ${THINPOOL}."
else
   echo "Docker configured to use default storage. It is recommended you configure a devicemapper thinpool."
fi

sudo systemctl daemon-reload
sudo systemctl start docker


echo "Adding ${USER} to sudo"
sudo usermod -a -G sudo ${USER} || display_error "failed to add ${USER} to sudo group"
echo "May need to re-login to see user group changes."

echo "Please make sure git ssh keys are set up for your user."
