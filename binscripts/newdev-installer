#!/usr/bin/env bash

set -eu

panic() {
	tput sgr0
	tput setaf 1
	echo
	echo "ERROR: $1" >&2
	echo
	tput sgr0
	exit 1
}

trap 'panic "Script failed at line ${LINENO}"' ERR

if [[ $EUID -eq 0 ]]; then
	panic "Please run this script as a non-root user"
fi

if ! sudo -V >/dev/null 2>&1; then
	panic "Please install sudo before running this script"
fi

if ! groups ${USER} | grep -q sudo; then
	echo
	echo "Adding ${USER} to the sudo group"
	sudo usermod -a -G sudo ${USER}
else
	echo
	echo "User ${USER} already added to the sudo group"
fi

if ! sudo -nl >/dev/null 2>&1; then
	echo
	echo "Configuring user ${USER} for password-less sudo usage"
	echo "${USER} ALL = (ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/${USER} >/dev/null
else
	echo
	echo "User ${USER} already configured for password-less sudo"
fi

export DEBIAN_FRONTEND=noninteractive  

sudo apt-get update -qq

if ! lsb_release >/dev/null 2>&1; then
	sudo apt-get install -y -q lsb-release 
fi

echo
echo "Configuring $(lsb_release -sd) for developer environment."

if ! sudo add-apt-repository -h >/dev/null 2>&1; then
	sudo apt-get install -y -q software-properties-common
fi
sudo apt-add-repository -y universe >/dev/null
sudo apt-add-repository -y multiverse >/dev/null
sudo apt-add-repository -y restricted >/dev/null

echo
echo "Installing packages"
APT_PACKAGES=$(cat << EOF
apt-transport-https
binutils
bison
build-essential
ca-certificates
curl
gcc
git
gnupg
libdevmapper-dev
libpam0g-dev
make
mercurial
net-tools
nfs-common
nfs-kernel-server
openjdk-11-jdk-headless
python2.7
python2.7-dev
sysstat
xfsdump
xfsprogs
EOF
)

# Add package for 'python2' command on Ubuntu 20.04 systems
if apt-cache show python2 >/dev/null 2>&1; then
	APT_PACKAGES="${APT_PACKAGES} python2"
fi

# Add package for 'python2' command on Ubuntu 18.04 systems
if sudo apt-get install --dry-run python-minimal >/dev/null 2>&1; then
	APT_PACKAGES="${APT_PACKAGES} python-minimal"
fi

sudo apt-get update -qq
sudo apt-get install -y -q ${APT_PACKAGES}

echo "Done installing packages"

if ! echo $PATH | grep -q "\.local/bin"; then
	echo
	echo "Configure ${HOME}/.local path"
	if ! test -d ${HOME}/.local/bin; then
		mkdir -p ${HOME}/.local/bin
	fi
	if ! grep -q "\.local\/bin" ${HOME}/.bashrc; then
		echo "PATH=\${HOME}/.local/bin:\${PATH}" >> ${HOME}/.bashrc
	fi
	export PATH=${HOME}/.local/bin:${PATH}
else
	echo
	echo "The ${HOME}/.local path is already configured"
fi

if ! test -f ${HOME}/.local/bin/pip; then
	echo
	echo "Install 'pip' Python package tool"
	sudo apt-get remove -qq python-pip
	curl -sSL https://bootstrap.pypa.io/pip/2.7/get-pip.py -o /tmp/get-pip.py
	python2 -W ignore::Warning /tmp/get-pip.py --user --no-color --progress-bar off
else
	echo
	echo "pip already installed"
fi

OBSOLETE_DOCKER_PKGS="docker docker.io containerd runc"

if ! sudo dpkg-query -s docker-ce >/dev/null 2>&1; then
	# Check whether docker-engine is a package, then add it to the list if it is.
	if apt-cache show docker-engine >/dev/null 2>&1; then
		OBSOLETE_DOCKER_PKGS="${OBSOLETE_DOCKER_PKGS} docker-engine"
	fi
	echo
	echo "Installing docker..."
	sudo apt-get remove -y -qq ${OBSOLETE_DOCKER_PKGS}
	curl -sSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
	echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
	sudo apt-get update -qq
	sudo apt-get install -y -q docker-ce docker-ce-cli containerd.io
	sudo usermod -a -G docker ${USER}
else
	echo
	echo "Docker already installed"
fi

# note: The '|| :' after EOM is prevent read returning a non-zero exit code when it hits the EOM.
read -r -d '' DOCKER_CONFIG << EOM || :
{
    "dns": ["10.87.112.37", "10.88.102.37", "8.8.8.8"],
    "insecure-registries" : ["localhost:5000"]
}
EOM

DOCKER_CONFIG_FILE=/etc/docker/daemon.json

if ! test -f ${DOCKER_CONFIG_FILE}; then
	echo
	echo "Configuring Docker"
	echo -e "${DOCKER_CONFIG}" | sudo tee ${DOCKER_CONFIG_FILE} >/dev/null
else
	echo
	echo "The Docker config file, ${DOCKER_CONFIG_FILE}, already exists."
	echo "Please ensure that it contains a configuration similar to the following:"
	echo
	echo -e "${DOCKER_CONFIG}"
fi

if ! test -f /etc/default/docker; then
	echo
	echo "Add file to quiet warnings from serviced"
	sudo touch /etc/default/docker
fi

sudo systemctl restart docker

if ! sudo dpkg-query -s google-cloud-sdk >/dev/null 2>&1; then
	echo
	echo "Install gcloud tools"
	# Create environment variable for correct distribution
	export CLOUD_SDK_REPO="cloud-sdk-bionic"

	# Add the Cloud SDK distribution URI as a package source
	echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

	# Import the Google Cloud Platform public key
	curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

	# Update the package list and install the Cloud SDK
	sudo apt-get update -qq
	sudo apt-get install -y -q google-cloud-sdk
else
	echo
	echo "gcloud tools already installed"
fi

echo
echo "Please re-login to make changes to your environment take effect."
